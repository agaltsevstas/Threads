#include "Coroutine.hpp"

#include <coroutine>

/*
 Корутина (coroutine) - функция с несколькими точками входа и выхода, из нее можно выйти середине, а затем вернуться в нее и продолжить исполнение. По сути это объект, который может останавливаться и возобновляться. C++20: stackless, userserver (yandex): stackfull.
  Пример — программы, выполняющие много операций ввода-вывода. Типичный пример — веб-сервер. Он вынужден общаться со многими клиентами одновременно, но при этом больше всего он занимается одним — ожиданием. Пока данные будут переданы по сети или получены, он ждёт. Если мы реализуем веб-сервер традиционным образом, то в нём на каждого клиента будет отдельный поток. В нагруженных серверах это будет означать тысячи потоков. Ладно бы все эти потоки занимались делом, но они по большей части приостанавливаются и ждут, нагружая операционную систему по самые помидоры переключением контекстов.
 Характериситки:
 - stackfull - держат свой стек в памяти на протяжении всего времени жизни корутины.
 - stackless - не сохраняет свой стек в памяти на протяжении всего времени жизни корутины, а только во время непосредственной работы. При этом стек аллоцируется в вызывающем корутину контексте.
 Методы:
 - co_await — для прерывания функции и последующего продолжения.
 - co_yield — для прерывания функции с одновременным возвратом результата. Это синтаксический сахар для конструкции с co_await.
 - co_return — для завершения работы функции.
 */


namespace coroutine
{
    void start()
    {
        {
            /*
            auto getInts = [](int first, int last) -> std::generator<int>
            {
                for (auto i= first; i <= last; ++i){
                    std::co_yield i;
                }
            }
            
            for (auto i: getInts(5, 10))
                std::cout << i << " ";
             */
        }
    }
}
